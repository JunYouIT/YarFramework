@{
    Yar.Service.BusinessContext context = Model.Context;
    var tokenId = (context == null || context.Credential == null) ? "" : context.Credential.TokenId;
    var resid = Model.RawData.form.ResId;
    var bizId = Model.BizId;
}
<div id="job" style="padding:5px;    background-color: #fff;">
    <div class="form form-horizontal">
        <div class="form-body">
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label class="control-label bold col-md-2"><span style="color: red;">*</span>组织机构</label>
                        <div class="col-md-10">
                            <div class="input-group">
                                <input id="txtOrganizationName" type="text" readonly="readonly" class="form-control" data-bind="value:formdata.OrganizationName" data-options="required:true" style="height: 34px; width: 100%; text-align: left;" placeholder="" />
                                <span class="input-group-btn">
                                    <button class="btn btn-default" data-bind="click:onSelectOrgUnit" type="button">选择组织</button>
                                </span>
                                <input id="txtOrganizationID" type="hidden" data-bind="value:formdata.OrganizationID" />
                                <input id="txtOrgLegalId" type="hidden" data-bind="value:formdata.LegalEntityID" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label bold col-md-4"><span style="color: red;">*</span>职位类型</label>
                        <div class="col-md-8" style="width:200px">
                            <label class="radio-inline">
                                <input disabled="disabled" type="radio" value="true" data-bind="checked:formdata.IsFP"> 职能类
                            </label>
                            <label class="radio-inline">
                                <input disabled="disabled" type="radio" value="false" data-bind="checked:formdata.IsFP"> 非职能类
                            </label>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="col-md-12">
                        <label class="checkbox-inline">
                            <label class="bold"><input id="chkIsMain" type="checkbox" data-bind="checked:formdata.IsMain">设为主职位</label>
                        </label>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label bold col-md-4"><span style="color: red;">*</span>职位</label>
                        <div class="col-md-8">
                            <input type="text" id="txtPositionID" data-bind="comboboxValue:formdata.PositionID,dataSource:dataSources.dsPositionID" data-options="required:true, missingMessage:'请选择职位'" class="easyui-textbox" placeholder="" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label bold col-md-4">上级职位</label>
                        <div class="col-md-8">
                            <span type="text" data-bind="text:formdata.ReportToPositionName" class="form-control-static" style="width: 100%; height: 34px;" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label bold col-md-4"><span style="color: red;">*</span>任职开始日期</label>
                        <div class="col-md-8">
                            <input id="txtOfficeBeginDate" class="form-control easyui-validatebox" data-provide="datepicker" type="text" data-bind="value:formdata.OfficeBeginDate" data-options="required:true, missingMessage:'请选择任职开始日期'" placeholder="" />
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label class="control-label bold col-md-4">任职结束日期</label>
                        <div class="col-md-8">
                            <input id="txtOfficeEndDate" class="form-control easyui-validatebox" data-provide="datepicker" type="text" data-bind="value:formdata.OfficeEndDate" placeholder="" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

    (function (eleId, context, callback) {
        //debugger;
        $.parser.parse(eleId);

        var ViewModel = function (data) {
            var self = this;

            self.Action = 'new';
            self.ViewTool = new YarClient.ViewModel("@bizId", "@tokenId");

            //debugger;
            if(data.form.ResId && data.form.ResId != '' && data.form.ResId != '00000000-0000-0000-0000-000000000000'){
                self.Action = 'edit';
            }
            if (data.form.PositionID == '00000000-0000-0000-0000-000000000000')
                data.form.PositionID = '';

            data.form.IsFP = data.form.IsFP.toString();

            self.formdata = ko.mapping.fromJS(data.form);
            self.dataSources = data.dataSources;

            //var checkUrl = self.ViewTool.GetActionUrl("Post", "CheckNoExist",{id:data.form.ResId});
            //debugger;
            //  var valid = String.format("cremote['{0}','name','名称已存在']", checkUrl);
            //  $("#legalname1").textbox({
            //    required: true,
            //    validType: ['length[0,100]',valid]
            //  });

            self.Init = function() {
                //debugger;
                if (data.form.IsMain) {
                    $("#chkIsMain").attr("disabled", "disabled");
                }

                self.formdata.OfficeBeginDate.subscribe(function(val){
                    $('#txtOfficeEndDate').datepicker('setStartDate',val==""?false:val);
                });

                self.formdata.OfficeEndDate.subscribe(function(val){
                    $('#txtOfficeBeginDate').datepicker('setEndDate',val==""?false:val);
                });

                if (self.formdata.DefaultOrganizationID()) {
                    self.formdata.OrganizationID(self.formdata.DefaultOrganizationID());
                    self.formdata.OrganizationName(self.formdata.DefaultOrganizationName());
                    self.formdata.LegalEntityID(self.formdata.DefaultLegalEntityID());
                }

                $('#txtOfficeEndDate').datepicker('setStartDate',self.formdata.OfficeBeginDate()==""?false:self.formdata.OfficeBeginDate());
                $('#txtOfficeBeginDate').datepicker('setEndDate',self.formdata.OfficeEndDate()==""?false:self.formdata.OfficeEndDate());
                //self.formdata.PositionID("");
            };

            self.OnSave = function (finishcall) {
                //debugger;
                var postdata = {formdata : MainApp.GetDataChange(self.formdata,data.form,true)};
                if(MainApp.FormValidate(job))
                {
                    var url = '';
                    if(self.Action == 'new'){
                        url = self.ViewTool.GetActionUrl("Post", "JobCreate",{empId:data.form.empId,legalId: data.form.legalId});
                    } else {
                        url = self.ViewTool.GetActionUrl("Post", "JobEdit",{resId:data.form.ResId});
                    }
                    YarClient.AjaxPost(url,postdata, {
                        IsWarning: true,
                        success : function(returnData) {
    
                            if(self.formdata.IsMain()){
                                returnData.PostInfo = { id: self.formdata.PositionID(), name: $("#txtPositionID").combobox('getText'), orgName: self.formdata.OrganizationName()};
                            }
                            else if (data.form.IsMain) {
                                returnData.PostInfo = { id: null, name:'', orgName: ''};
                            }
                            finishcall(returnData,callback);
                        }
                    });
                }
                else {
    
                    var vbs = $(job).find('.validatebox-text:not(:disabled)').validatebox('validate');
                    var invalidbox = $(job).find('.validatebox-invalid');
                    var message = '';
                    for (var i = 0; i < invalidbox.length; i++) {
                        message+=$(invalidbox[i]).data().validatebox.message+'\n\r';
                    }
                    swal(message, null, 'warning');
                }
            };

            self.OnRefresh = function () {
                var data = {
                };
            };

            self.onSelectOrgUnit = function () {
                MainApp.ShowDialog(MainApp.GetUrl("_BizOrganizationService", "Get", "Biz_Select_OrgUnit.OrgView",{notLimitLegal:'1'}), {}, function (data) {
                    self.formdata.OrganizationName(data[0].Name);
                    self.formdata.LegalEntityID(data[0].LegalEntityID);
                    self.formdata.OrganizationID(data[0].Id);
                    //self.OnRefresh();
                    //alert(JSON.stringify(data));
                });
            };

            self.OnNeedRefreshJobPositionList = function() {

                //debugger;
                var url = self.ViewTool.GetActionUrl("Get", "GetJobPositionList", {legal: self.formdata.LegalEntityID(), orgId: self.formdata.OrganizationID(), isFP: self.formdata.IsFP()});
                YarClient.AjaxGet(url,{
                    IsWarning: true,
                    success: function(returnData) {
                        //debugger;
                        $("#txtPositionID").combobox('loadData', returnData.Result);
                    }
                });

                //$.ajax({
                //    url: url,
                //    type:'POST',
                //    success: function (returnData) {
                //        //debugger;
                //        $("#txtPositionID").combobox('loadData', JSON.parse(returnData));
                //    },
                //    error: function (err) {

                //    }
                //});

                // var postdata = {  };
                //YarClient.AjaxPost(url,postdata, {
                //    IsWarning: true,
                //    success : function(returnData) {
                //        alert(JSON.stringify(returnData));
                //    }
                //});
            }

            self.OnJobChanged = function() {
                var url = self.ViewTool.GetActionUrl("Post", "GetReportToPostionName", {posId: self.formdata.PositionID()});

                if (self.formdata.PositionID() != '') {
                    $.ajax({
                        url: url,
                        type: 'POST',
                        success: function(returnData) {
                            //debugger;
                            self.formdata.ReportToPositionName(returnData);
                        },
                        error: function(err) {
                            self.formdata.ReportToPositionName('');
                        }
                    });
                } else {
                    self.formdata.ReportToPositionName('');
                }
            }
        };

        var data = @this.Raw(Model.Data);
        var viewModel = new ViewModel(data);


        viewModel.formdata.OrganizationID.subscribe(function (newValue) {
            viewModel.formdata.PositionID('');
            viewModel.OnNeedRefreshJobPositionList();
        });

        viewModel.formdata.IsFP.subscribe(function (newValue) {
            viewModel.OnNeedRefreshJobPositionList();
            viewModel.formdata.PositionID('');

            //debugger;
            if (viewModel.formdata.IsFP()!='true') {
                viewModel.formdata.IsMain(false);
                $("#chkIsMain").attr("disabled", "disabled");
            }
            else {
                if(!viewModel.formdata.IsMain())
                    $("#chkIsMain").removeAttr("disabled");
            }
        });

        if (viewModel.formdata.IsFP()!='true') {
            viewModel.formdata.IsMain(false);

            $("#chkIsMain").attr("disabled", "disabled");
        }
        else {
            if(!viewModel.formdata.IsMain())
                $("#chkIsMain").removeAttr("disabled");
        }

        viewModel.formdata.PositionID.subscribe(function (newValue) {
            viewModel.OnJobChanged();
        });

        MainApp.DialogModel(eleId, viewModel.Action == "new" ? '新增工作任职信息' : '编辑工作任职信息', 750, 250, viewModel.OnSave, null, function () {
            ko.applyBindings(viewModel, $(eleId)[0]);
            viewModel.Init();
        });

    })(eleId, context, callback);
</script>
